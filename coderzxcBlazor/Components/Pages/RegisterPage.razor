@page "/register"
@using coderzxcBlazor.Request
@using coderzxcBlazor.Response
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveServer
<Fluxor.Blazor.Web.StoreInitializer />

<div class="page-wrapper">
    <div class="login-container">
        <h2>РЕГИСТРАЦИЯ</h2>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error-message">@ErrorMessage</div>
        }
        <div class="form-group">
            <label for="username">Логин:</label>
            <input id="username" type="text" @bind="Username" placeholder="Введите логин" />
        </div>
        <div class="form-group">
            <label for="password">Пароль:</label>
            <input id="password" type="password" @bind="Password" placeholder="Введите пароль" />
        </div>
        <div class="form-group">
            <label for="role">Роль:</label>
            <select id="role" @bind="SelectedRole">
                <option value="">—————————————————————————</option>
                @foreach (var role in Roles)
                {
                    <option value="@role">@role</option>
                }
            </select>
        </div>
        <button @onclick="OnRegisterClicked">Зарегистрироваться</button>
        <div class="register-link">
            Уже есть аккаунт? <a href="/">Войти</a>
        </div>
    </div>
</div>

@code {
    private string Username { get; set; } = "";
    private string Password { get; set; } = "";
    private string SelectedRole { get; set; } = "";
    private List<string> Roles = new List<string>
    {
        "Складской менеджер",
        "Логист",
        "Водитель",
        "Администратор"
    };
    private string ErrorMessage { get; set; } = "";

    private async Task OnRegisterClicked()
    {
        ErrorMessage = string.Empty;
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password) || string.IsNullOrWhiteSpace(SelectedRole))
        {
            ErrorMessage = "Пожалуйста, заполните все поля.";
            return;
        }
        var success = await RegisterAsync(Username, Password, SelectedRole);
        if (success)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            ErrorMessage = "Ошибка регистрации. Попробуйте ещё раз.";
        }
    }

    private async Task<bool> RegisterAsync(string username, string password, string role)
    {
        try
        {
            var registerRequest = new RegisterRequest
            {
                Username = username,
                Password = password,
                Role = role
            };
            var response = await Http.PostAsJsonAsync("user/register", registerRequest);
            return response.IsSuccessStatusCode;
        }
        catch
        {
            ErrorMessage = "Ошибка при регистрации.";
            return false;
        }
    }
}