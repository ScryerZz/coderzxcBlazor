@page "/products"
@using coderzxcBlazor.Request
@using coderzxcBlazor.Response
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation
@rendermode InteractiveServer
<Fluxor.Blazor.Web.StoreInitializer />
<h2 class="text-center mb-4">Управление товарами</h2>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="error-message">@ErrorMessage</div>
}

<div class="table-responsive">
    <table class="table table-striped table-bordered text-white">
        <thead class="thead-dark">
            <tr>
                <th>Название</th>
                <th>Партия</th>
                <th>Количество</th>
                <th>Срок годности</th>
                <th>Условия хранения</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.BatchNumber</td>
                    <td>@product.Quantity</td>
                    <td>@product.ExpirationDate</td>
                    <td>@product.StorageConditions</td>
                    <td>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteProduct(product.Id)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<hr />

<h4>Добавить новый товар</h4>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            <label>Название</label>
            <input class="form-control" @bind="NewProduct.Name" />
        </div>
        <div class="form-group">
            <label>Партия</label>
            <input class="form-control" @bind="NewProduct.BatchNumber" />
        </div>
        <div class="form-group">
            <label>Количество</label>
            <input class="form-control" type="number" @bind="NewProduct.Quantity" />
        </div>
        <div class="form-group">
            <label>Срок годности</label>
            <input class="form-control" @bind="NewProduct.ExpirationDate" />
        </div>
        <div class="form-group">
            <label>Условия хранения</label>
            <input class="form-control" @bind="NewProduct.StorageConditions" />
        </div>
        <button class="btn btn-primary" @onclick="AddProduct">Добавить</button>
    </div>
</div>

@code {
    private List<ProductResponse> Products = new();
    private ProductRequest NewProduct = new();
    private string ErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ProductListResponse>("product/get");
            Products = response?.Products ?? new List<ProductResponse>();
        }
        catch
        {
            ErrorMessage = "Ошибка при загрузке товаров.";
        }
    }

    private async Task AddProduct()
    {
        try
        {
            var res = await Http.PostAsJsonAsync("product/create", NewProduct);
            if (res.IsSuccessStatusCode)
            {

                await LoadProducts();
                NewProduct = new ProductRequest();
                ErrorMessage = "";
            }
            else
            {
                ErrorMessage = "Ошибка при добавлении товара.";
            }
        }
        catch
        {
            ErrorMessage = "Ошибка при добавлении товара.";
        }
    }

    private async Task DeleteProduct(int id)
    {
        try
        {
            var res = await Http.DeleteAsync($"product/delete/{id}");
            if (res.IsSuccessStatusCode)
            {
                await LoadProducts();
            }
            else
            {
                ErrorMessage = "Не удалось удалить товар.";
            }
        }
        catch
        {
            ErrorMessage = "Ошибка при удалении товара.";
        }
    }
}