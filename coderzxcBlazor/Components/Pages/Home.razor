@page "/"
@using coderzxcBlazor.FluxState
@using coderzxcBlazor.Request
@using coderzxcBlazor.Response
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveServer
<Fluxor.Blazor.Web.StoreInitializer />

<div class="page-wrapper">
    <div class="login-container">
        <h2>ВХОД</h2>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error-message">@ErrorMessage</div>
        }
        <div class="form-group">
            <label for="username">Логин:</label>
            <input id="username" type="text" @bind="Username" placeholder="Введите логин" />
        </div>
        <div class="form-group">
            <label for="password">Пароль:</label>
            <input id="password" type="password" @bind="Password" placeholder="Введите пароль" />
        </div>
        <button @onclick="OnLoginClicked">Войти</button>
        <div class="register-link">
            Нет аккаунта? <a href="/register">Зарегистрироваться</a>
        </div>
    </div>
</div>

@code {
    private string Username { get; set; } = "";
    private string Password { get; set; } = "";
    private string ErrorMessage { get; set; } = "";

    private async Task OnLoginClicked()
    {
        ErrorMessage = string.Empty;
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password))
        {
            ErrorMessage = "Пожалуйста, заполните логин и пароль.";
            return;
        }
        var loginSuccess = await LoginAsync(Username, Password);
        if (loginSuccess)
        {
            Navigation.NavigateTo("/dashboard");
        }
        else
        {
            ErrorMessage = "Неверный логин или пароль.";
        }
    }

    private async Task<bool> LoginAsync(string username, string password)
    {
        try
        {
            var loginRequest = new LoginRequest { Username = username, Password = password };
            var response = await Http.PostAsJsonAsync("user/login", loginRequest);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (json != null && !string.IsNullOrEmpty(json.Token))
                {
                    Dispatcher.Dispatch(new SetJwtTokenAction(json.Token));
                    return true;
                }
            }
        }
        catch
        {
            ErrorMessage = "Ошибка при входе.";
        }
        return false;
    }
}