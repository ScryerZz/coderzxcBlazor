@page "/chat"
@inject HttpClient Http
@inject NavigationManager Navigation

@using System.IdentityModel.Tokens.Jwt
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Web
@using coderzxcBlazor.Response
@using System.Security.Claims
@using System.Text.Json
@inject IState<AuthState> _authState
@rendermode InteractiveServer

<div class="chat-container">
    <h2 class="chat-title">Общий Чат</h2>

    <div class="messages" id="messageList">
        @foreach (var msg in messages)
        {
            <div class="message @(msg.SenderId == currentUserId ? "user-message" : "sender-message")">
                <p class="sender-name">@msg.SenderName:</p>
                <p>@msg.Text</p>
                <span class="timestamp">@msg.SentAt.ToLocalTime().ToString("HH:mm")</span>
            </div>
        }
    </div>

    <div class="input-container">
        <input type="text" @bind="newMessage" placeholder="Введите сообщение..." @onkeydown="HandleEnter" />
        <button @onclick="SendMessage">Отправить</button>
    </div>
</div>

@code {
    private List<MessageResponse> messages = new();
    private string newMessage = string.Empty;
    private HubConnection hubConnection;
    private int currentUserId;
    private string currentUserName;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = _authState.Value.JwtToken;
            if (string.IsNullOrEmpty(token))
            {
                return;
            }

            ParseToken(token);

            // Инициализируем SignalR
            await InitializeChatHubAsync(token);
        }
    }

    private async Task InitializeChatHubAsync(string token)
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5204/chatHub", options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(token);
            })
            .Build();

        // Подписываемся на событие получения сообщения
        hubConnection.On<string, int, string, DateTime>("ReceiveGlobalMessage", (text, senderId, senderName, sentAt) =>
        {
            messages.Add(new MessageResponse
            {
                SenderId = senderId,
                SenderName = senderName,
                Text = text,
                SentAt = sentAt
            });

            InvokeAsync(StateHasChanged);
        });

        // Получаем историю сообщений
        hubConnection.On("ReceiveGlobalHistory", (object[] history) =>
        {
            foreach (var obj in history)
            {
                if (obj is JsonElement element)
                {
                    var message = JsonSerializer.Deserialize<HistoryMessageDto>(element.GetRawText(), new JsonSerializerOptions { WriteIndented = true });
                    if (message != null)
                    {
                        messages.Add(new MessageResponse
                        {
                            SenderId = message.senderId,
                            SenderName = message.senderName,
                            Text = message.text,
                            SentAt = message.sentAt
                        });
                    }
                }
            }

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("LoadGlobalHistory");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public class HistoryMessageDto
    {
        public int senderId { get; set; }
        public string senderName { get; set; }
        public string text { get; set; }
        public DateTime sentAt { get; set; }
    }

    private void ParseToken(string jwtToken)
    {
        var handler = new JwtSecurityTokenHandler();
        if (!handler.CanReadToken(jwtToken))
        {
            currentUserId = 0;
            currentUserName = null;
            return;
        }

        var token = handler.ReadJwtToken(jwtToken);

        var idClaim = token.Claims.FirstOrDefault(c => c.Type == JwtRegisteredClaimNames.Sub);
        if (idClaim != null && int.TryParse(idClaim.Value, out int id))
        {
            currentUserId = id;
        }
        var nameClaim = token.Claims.FirstOrDefault(c => c.Type == JwtRegisteredClaimNames.UniqueName ||
                                                        c.Type == ClaimTypes.Name);
        currentUserName = nameClaim?.Value ?? "Unknown";
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage)) return;

        await hubConnection.SendAsync("SendGlobalMessage", newMessage, currentUserId, currentUserName);

        newMessage = string.Empty;
    }

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await SendMessage();
    }
}
